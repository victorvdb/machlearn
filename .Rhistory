results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * (1-cgt) * (1-dt)
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r2 <- box2(returns)
r3 <- box3(returns)
View(r3)
box3 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, tax=0.012) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[4] <- tax * t[2]
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]-t[4]
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20, dt=0.25) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * (1-cgt) * (1-dt)
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r3 <- box3(returns)
r2 <- box2(returns)
View(r3)
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * (1-cgt)
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r2 <- box2(returns)
View(r2)
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * cgt
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r2 <- box2(returns)
View(r2)
View(r3)
?shuttle
library(MASS)
s <- shuttle
str(s)
View(s)
?glm
fit <- glm(s$auto ~s$wind)
fit <- glm(s$auto ~ s$wind, family="binomial")
fit <- glm(s$use ~ s$wind, family="binomial")
fit
s$auto <- as.numeric(s$use)
s$wind <- as.numeric(s$wind)
View(s)
s <- shuttle
s$auto <- as.numeric(s$use)
s$twind <- as.numeric(s$wind)
s
View(s)
s$auto <- s$auto - 1
s$twind <- s$twind -1
View(s)
s$auto <- abs(s$auto - 1)
logFit <- glm(s$auto ~ s$twind, family="binomial")
logFit
exp(0.03181)
0.25131 / (0.25131 + 0.03181)
1/(0.8876448)
plot(s$auto, logFit$fitted)
exp(0.25131) / (exp(0.25131+0.03181))
logFit(s$auto ~ s$twind + s$magn)
logFit <- glm(s$auto ~ s$twind + s$magn, family="binomial")
logFit
exp(0.3635) / exp(0.3635 + 0.03201)
logFit2 <- glm(abs(s$auto-1) ~ s$twind)
logFit2
logFit2 <- glm(abs(s$auto-1) ~ s$twind, family="binomial")
logFit2
sp <- InsectSprays
poisFit <- glm(InsectSprays$count ~InsectSprays$spray, family="poisson")
poisFit
exp(2.67417) / (exp(2.67417 + 0.05588))
poisFitbase <- glm(sp$count ~ sp$spray + 5, family="poisson")
poisFitbase <- glm(sp$count ~ sp$spray + offset(5), family="poisson")
poisFitbase <- glm(sp$count ~ sp$spray + offset(t), family="poisson")
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x>knot) * (x-knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y~xMat -1))
plot(x, y, frame= FALSE)
plot(x, y)
lines(x, yhat, col="red")
lm(y ~xMat -1)
2.0372 - 1.0242
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
var(fit$residuals)
varRes <- var(fit$residuals)
varEst(est(fit))
varEst <- est(fit)
varEst <- est(ols.ic, ols.slope)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit<-lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(fit$residuals, attenu$mag)
cov(fit$residuals, attenu$mag)
1
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
all <- lm(fertility ~ ., swiss)
?swiss
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms(swiss)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
1
all$coefficients-efit$coefficients
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height +
| Constant -1, trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
library(slidify)
library(knitr)
setwd("~/R/devdata/courseproject/presentation")
publish('Devdata_courseproject', 'index.html', host='rpubs')
debug(publish('Devdata_courseproject', 'index.html', host='rpubs'))
publish('Devdata_courseproject', 'index.html', host='rpubs')
traceback()
?uploadFunction
debug(publish)
publish('Devdata_courseproject', 'index.html', host='rpubs')
debug(publish_deck)
RCurl
RCurl::curlOptions
data(iris)
library(ggplot2)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species)
library(caret)
install.packages(rattle)
install.packages('rattle')
library(AppliedPredictiveModeling)
library(caret)
data("segmentationOriginal")
inTrain <- createDataPartition(y=segmentationOriginal$Class, p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Class ~ ., method='rpart' data=training)
modFit <- train(Class ~ ., method='rpart', data=training)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE)
text(modFit$finalModel, use.n=TRUE, cex=.8)
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model <- train(Class ~ ., method='rpart', data=training)
print(model$finalModel)
install.packages('pggm')
library(pggm)
install.packages('pgmm')
library(pgmm)
data(olive)
olive <- olive[,-1]
head(olive)
modFit <- train(Area ~ ., data=olive, method='rpart')
newdata <- as.data.frame(t(colMeans(olive)))
View(newdata)
modFit <- train(Area ~ ., data=olive, method='tree')
View(olive)
?predict
modFit <- train(Area ~ ., data=olive, method='rpart')
predict(modFit, newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family=binomial())
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family=binomial)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family=binomial())
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family=binomial())
predict(modFit, trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
trainSA$chd <- as.Factor(trainSA$chd)
trainSA$chd <- as.factor(trainSA$chd)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
predict(modFit, trainSA)
missClass(trainSA$chd, predict(modFit, trainSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
missClass(trainSA$chd, predict(modFit, trainSA))
missClass(testSA$chd, predict(modFit, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data=vowel.train, method='rf')
?varImp
varImp(modFit)
setwd("~/R/machlearn")
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv', 'pml-training.csv')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv', 'pml-testing.csv')
train <- read.csv('pml-training.csv')
test <- read.csv('pml-testing.csv')
View(test)
View(train)
train$classe
str(train)
names(train)
View(test)
quiz <- test
all <- train
trainIndex <- createDataPartition(train$classe, p=0.7)
train <- all[trainIndex,]
trainIndex <- createDataPartition(train$classe, p=0.7, list=FALSE)
train <- all[trainIndex,]
test <- all[-trainIndex,]
all$classe <- as.factor(all$classe)
quiz$classe <- as.factor(quiz$classe)
View(quiz)
train <- all[trainIndex,]
test <- all[-trainIndex,]
modFit <- train(classe ~ ., method='rpart', data=train)
pp <- all
nzv <- nearZeroVar(all, saveMetrics=TRUE)
nzv
pp
pp[,-1:7]
t <- pp[,-1]
pp <- pp[,-1:7]
pp <- pp[,-1:-7]
View(pp)
nzv <- nearZeroVar(pp, saveMetrics=TRUE)
nzv
pp <- pp[, -nzv$nzv]
View(pp)
pp <- pp[, -nzv]
nzv <- nearZeroVar(pp)
pp <- pp[, -nzv]
set.seed(1980)
trainIndex <- createDataPartition(classe, data=pp, p=0.7)
?createDataPartition
trainIndex <- createDataPartition(pp$classe, p=0.7)
train <- pp[trainIndex,]
trainIndex <- createDataPartition(pp$classe, p=0.7, list=FALSE)
train <- pp[trainIndex,]
test <- pp[-trainIndex,]
modelFit <- train(classe ~ ., data=train, method='rpart')
print(modelFit)
print(modelFit$finalModel)
p <- predict(modelFit, test)
p
sum(p==test$classe)
sum(p!=test$classe)
modelFit <- train(classe ~ ., data=train, method='rpart', preProcess="pca")
p <- predict(modelFit, test)
sum(p==test$classe)
length(p)
setwd("~/R/machlearn")
View(train)
file.exists("pml-training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
alldata <- read.csv("pml-training.csv")
## getting data, loading packages etc
if(!file.exists("pml-training.csv") {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
}
alldata <- read.csv("pml-training.csv")
?if
## getting data, loading packages etc
if (!file.exists("pml-training.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
}
alldata <- read.csv("pml-training.csv")
## getting data, loading packages etc
if (!file.exists("pml-training.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
}
alldata <- read.csv("pml-training.csv")
## set seed, split
set.seed(1980)
trainingIndex <- createDataPartition(alldata$classe, p=0.7, list=FALSE)
train <- alldata[trainingIndex,]
test <- alldata[-trainingIndex,]
## getting data, loading packages etc
if (!file.exists("pml-training.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
}
alldata <- read.csv("pml-training.csv")
## set seed, split
set.seed(1980)
trainingIndex <- createDataPartition(alldata$classe, p=0.7, list=FALSE)
train <- alldata[trainingIndex,]
test <- alldata[-trainingIndex,]
## Data manipulation on train
train <- train[, -1:-7]
nzv <- nearZeroVar(train)
train <- train[,-nzv]
View(train)
View(train)
sum(is.NA(train$max_roll_belt))
sum(is.na(train$max_roll_belt))
sum(!is.na(train$max_roll_belt))
sum(!is.na(train$roll_belt))
sum(is.na(train$roll_belt))
?tapply
temp <- apply(train,1,sum(is.na))
temp <- apply(train,1,function(x) { sum(is.na(x))})
temp
temp <- apply(train,2,function(x) { sum(is.na(x))})
temp
unique(temp)
mostly_filled <- apply(train,2,function(x) {sum(is.na(x))})
remove <- mostfly_filled>0
mostly_filled <- apply(train,2,function(x) {sum(is.na(x))})
remove <- mostly_filled>0
mostly_filled <- apply(train,2,function(x) {sum(is.na(x))})
remove <- which(mostly_filled>0)
## set seed, split
set.seed(1980)
trainingIndex <- createDataPartition(alldata$classe, p=0.7, list=FALSE)
train <- alldata[trainingIndex,]
test <- alldata[-trainingIndex,]
## Data manipulation on train
train <- train[, -1:-7]
nzv <- nearZeroVar(train)
train <- train[,-nzv]
mostly_filled <- apply(train,2,function(x) {sum(is.na(x))})
remove <- which(mostly_filled>0)
train <- train[,-remove]
prcomp <- prcomp(train)
alldata <- read.csv("pml-training.csv")
alldata$classe <- as.factor(alldata$classe)
## set seed, split
set.seed(1980)
trainingIndex <- createDataPartition(alldata$classe, p=0.7, list=FALSE)
train <- alldata[trainingIndex,]
test <- alldata[-trainingIndex,]
## Data manipulation on train
train <- train[, -1:-7]
nzv <- nearZeroVar(train)
train <- train[,-nzv]
mostly_filled <- apply(train,2,function(x) {sum(is.na(x))})
remove <- which(mostly_filled>0)
train <- train[,-remove]
prcomp <- prcomp(train[,-53])
prcomp
modelFit <- train(classe ~ ., method="rpart", data=train)
print(modelFit$finalModel)
modelFit
p <- predict(modelFit, train)
p
sum(p==train$classe)
sum(p!=train$classe)
modelFit <- train(classe ~ ., method="rpart", data=train, preProcess="pca")
p <- predict(modelFit, train)
sum(p==train$classe)
sum(p!=train$classe)
confusionMatrix(train$type, predict(modelFit, train))
confusionMatrix(train$classe, predict(modelFit, train))
modelFit <- train(classe ~ ., method="rpart", data=train)
confusionMatrix(train$classe, predict(modelFit, train))
modelFit <- train(classe ~ ., method="glm", data=train)
modelFit <- train(classe ~ ., method="rf", data=train)
confusionMatrix(train$classe, predict(modelFit, train))
confusionMatrix(test$classe, predict(modelFit, test))
test <- test[,-1:7]
test <- test[,-nvz]
test <- test[,-remove]
library(caret)
if (!file.exists("pml-training.csv")) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
}
alldata <- read.csv("pml-training.csv")
alldata$classe <- as.factor(alldata$classe)
set.seed(1980)
trainingIndex <- createDataPartition(alldata$classe, p=0.7, list=FALSE)
train <- alldata[trainingIndex,]
test <- alldata[-trainingIndex,]
## Data manipulation on train
train <- train[, -1:-7]
nzv <- nearZeroVar(train)
train <- train[,-nzv]
mostly_filled <- apply(train,2,function(x) {sum(is.na(x))})
remove <- which(mostly_filled>0)
train <- train[,-remove]
test <- test[,-1:-7]
test <- test[,-nzv]
test <- test[,-remove]
confusionMatrix(train$classe, predict(modelFit, train))
confusionMatrix(test$classe, predict(modelFit, test))
modelFit
modelFit$finalModel
confusionMatrix(train$classe, predict(modelFit, train))
## Train random forest model
modelFit <- train(classe ~ ., method="rfcv", data=train)
## check fit on training data
confusionMatrix(train$classe, predict(modelFit, train))
p <- predict(modelFit, train)
r <- train$classe
sum(p==r)
sum(p!=r)
confusionMatrix(test$classe, predict(modelFit, test))
modelFit <- train(classe ~ ., method="rf", data=train)
modelFit <- train(classe ~ ., method="rpart", data=train)
modelFit <- train(classe ~ ., method="rpart", data=train, trControl=trainControl(method="cv", number=10))
print(modelFit)
modelFit <- train(classe ~ ., method="rpart", data=train, trControl=trainControl(method="cv", number=100))
print(modelFit)
modelFit <- train(classe ~ ., method="rf", data=train, trControl=trainControl(method="cv", number=20))
